title: SOLID Principles 
author: Raghu Rajagopalan <raghuramanr@aditi.com>

%css 
.slide { 
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, 
from(orange), to(white)); 
    background-image: -moz-linear-gradient(top, orange, white); 
} 

#footer {
    background-image: url(images/footer_bg_dark.png);
    background-repeat:no-repeat ;

}
#header {
    background-image: url(images/header_bg.png);
    background-repeat:no-repeat ;
}
h1  {
    margin-top:0px;	
}
%end 
Agenda
===============================
1. Theory: The principles
1. Tools: Practice
1. Walkthrough: Putting it together.

{{ help }}

SOLID intro
================================================================================

![principles_level](images\Principles_Pyramid.png)

Principles to OO design

- Focuses on bottom up approach to design.
    - but keeping these in mind also allows you to avoid mistakes in a top down approach
- Scope is generally a single class/type.

SOLID Principles
================
1. __S__ - Single Responsibility Principle (SRP) 
1. __O__ - Open/Closed Principle (OCP) 
1. __L__ - Liskov's Substitution Principle (LSP) 
1. __I__ - Interface Segregation Principle (ISP)
1. __D__ - Dependency Inversion Principle (DI)

Single Responsibility Principle (SRP)
=====================================

{% left %}


Every class has a one and only one Responsibility.

{% step %}
  * But how do you define a Responsibility? 
    * An example: Gather data for a report and display it.
{% end %}

{% step %}
Every class should have one and only one **reason for change**
{% end %}

{% step %}
* Symptoms
1. God Classes
1. Tight coupling - unrelated changes cause issues.
{% end %}
{% end %}

{% right %}
![SRP](images\single_responsibility_principle_thumb.jpg)
{% end %}

Open/Closed Principle (OCP) 
================================

{% left  %}
Classes are:

* Open for *Extension*
* Closed  for *modification*

{% step %}
- Open for extension 
    - Extending behavior by subclassing OR 
    - replacing it with another implementation 
- Closed for modification 
    - You shouldnt have to go modify the source.


{% end %}
{% end %}

{% right %}
![OCP](images\openclosed_principle_thumb.jpg)
{% end %}

Liskov's Substitution Principle (LSP)
================================

{% left %}
* Subclass instances can be used wherever the super-class is used *without
     breaking functionality/correctness* in any way.

{% step %}
Symptoms:

1. RTTI code - typeof abuses.
{% end %}
{% end %}

{% right %}
![OCP](images\liskov_substitution_principle_thumb.jpg)
{% end %}

Interface Segregation Principle (ISP)
======================================

{% left %}
* Clients of a class/interface/type should not be forced to aware of behavior
 that they do not need.

{% step %}
* Prefer thin interfaces to fat ones. Interfaces should only
    expose the behavior required by the client and not more 
* Behavior exposed by an interface should be highly cohesive 
{% end %}

{% step %}
Symptoms:

1. God classes/Types
1. To change one piece of behavior, you end up having to implement other un-related functionality.
{% end %}
{% end %}


{% right %}
![ISP](images\interface_segregation_principle_thumb.jpg)
{% end %}

Dependency Inversion (DIP)
=====================

{% left %}
* Classes/Interfaces should depend on Abstractions/Types. They should not depend on concrete
    implementations.

{% step %}
* What's a dependency?
    * Interface - Anything that shows up in the signature (parameter, return type etc)
    * Implementation - Any type/class used in the implementation
{% end %}

{% step %}
Symptoms:

1. Direct dependency on concrete types (new SomeDerivedClass())
1. Hard to use a different implementation
1. Hard to change behavior
{% end %}
{% end %}

{% right %}
![DIP](images\dependency_inversion_principle_thumb.jpg)
{% end %}

% SOLID in practice
% ================================================================================
% 1. Walk the talk - why is it hard?
%     1. Complexity
%         - My problem is complex, I can't map it directly to SOLID.
%     2. Scope
%         - I just need to get this done - why bother?
% 1. Popquiz 1: What's the time delta for implementation of a system to just
% work vs to work while ensuring good design is followed?
%     1. 2X - good design takes twice longer?
%     2. 5X - good design takes 5 times as much longer?
%     3. Lots more than that?
%     4. Lot less than that?
% 
% {% step %}
% It actually takes about 1.25X to get to a very solid start (pun!!!)
% The 25% more is repaid back during the course of the implementation,
% maintenance and extension multiple times.
% So, in effect, a well designed system takes a lot less to do!!!
% {% end %}
% 
% 1. Popquiz 2 - what's the 25%?

Part 2 - Practice
================================================================================

How useful were these design principles?

{% step %}
![blind](images\bunnyfoot-usability-cartoon-accessibility.gif)

1. While Design principles are great, they still require good judgement.
    1. Good judgement to recognize where you are now.
    1. Know where we need to get to.

Sadly, that's easier said than done without something actionable that gives quick feedback.
{% end %}



Test Driven development
===============================

{% step %}
![TDD dev process](images\tdd_flow.gif)
{% end %}


TDD and Design
===============================

- TDD approach forces one to think how code will be used in a different context.
- Writing testable code drives good design characteristics
    - loose coupling
    - Dependency Inversion
    - High cohesion
- TDD/Unit tests will not by itself make you design good software.
- However, it will immediately point out design pitfalls/shortcomings.



Walkthrough - A 'simple' sort program
================================================================================
Let's start with a sort program. Read input from file provided as cmd line arg and sort it. Display output on screen.

{% code lang=csharp %}
///
/// This might be how we'd start...
///
class Sort {
    static void main (String[] args)     {
        if (args.Length  == 0 )  {
            // print message 
            return;
        }
        String[] lines = System.IO.File.ReadAllLines(args[0]);
        Array.Sort(lines)
        for (int i = 0; i < lines.Length; i++) {
            Console.Writeline(lines[i]);
        }
    }
}
{% end %}

SOLID review
===============================
{% step %}
- Single Responsibility Principle (SRP)
  -   Three distinct actions - reading, sorting and writing the output.
  -   All three in the same class.
  -   Any change in any one of them means we have to change the class.
{% end %}

{% step %}
* Open/Closed Principle (OCP)
  - Single class - and since main is static, we can't really extend it. 
{% end %}

{% step %}
* Liskov's Substitution Principle 
    - LSP - NA
{% end %}

{% step %}
* Interface Segregation Principle (ISP)
  - We only have sort.main
{% end %}

{% step %}
* Dependency Injection Principle (DIP)
  - Dependencies (System.IO.File, Array, Console) are directly used 
{% end %}

{% step %}
Let's try TDD and see where we end up?

{% end %}

Starting a test case.
===============================
Code:

{% code lang=csharp %}
        if (args.Length  == 0 )  {
            // print message 
            return;
        }
{% end %}
Test case 1: Does the program handle the case where no argument is supplied?


Now the Test case
===============================

{% code lang=csharp %}
class SortTest {
    public void ArgumentTest {
        Sort.main(new String[]{});
        //  oops what now? Can't write an assert
    }
}
{% end %}
{% step %}
So we've now hit our first problem - though we started with the test case, we
can't really complete it as is as we can't express a valid assertion.
{% end %}

Fix the Interface of `main`
===============================
So lets change the signature of the main method to fix that.

{% code lang=diff %}
class Sort {
-     static void main (String[] args)     {
+     static int main (String[] args)  {
        if (args.Length  == 0 )  {
            // print message 
-            return;
+            return 1;
        }
{% end %}

% And our test case:
% 
% {% code lang=csharp %}
% class SortTest {
%     public void ArgumentTest {
%         int retVal = Sort.main(new String[] {});
%     	Assert.AreEqual(1, retVal);
%     }
% }
% {% end %}

{% step %}

Takeaway 
-------------------------------
If we'd started with the test case instead of the code, we would have hit the
problem with return value right away and would have saved one iteration.

{% end %}

Let's make it a little more robust
===============================
Let's adopt some defensive coding - lets check if the file is really there?

Test case 2: Fail if the file does not exist?

{% code lang=csharp %}
class Sort {
    static int main (String[] args)     {
        // check for arg lenght
        // code elided...
        String filename = args[0];
        if (!System.IO.File.exists (filename)) {
            //print error
            return 2;
        }
    }
}

class SortTest {
    /// .... other tests
    public void FileNotExistsTest {
        int retval = Sort.main(new String[] {"c:\\nonsense.txt"});
    	Assert.AreEqual<int>(2, retval);
    }
}
{% end %}

It's a valid test BUT...
===============================

- The test case is environment/resource dependent
- Dependency of `System.IO.File` is making it hard to write a test case - since this is always executed.
- What can we do?
    1. Ensure somehow that the file does not exist?
    1. Break the dependency on `System.IO.File`?

{% step %}
### Option 1 is an anti pattern - that path leads to tears, trouble and pain.
{% end %}

Refactoring
===============================

{% step %}

1. Arrange somehow within a test case that the condition evaluates to True (__Arrange__)
2. Then call the method.(__Act__)
3. And after the method returns, Assert if we got a proper return value.(__Assert__)
{% end %}

Mocks to the rescue!
===============================
So let's refactor the code so that we can Mock the file system API call.
Introduce a thin wrapper interface around System.IO.File 

{% left %}

{% code lang=csharp %}
public interface IFileWrapper {
    bool Exists();
}

class FileWrapper: IFileWrapper {
	string thePath;
    public FileWrapper(string path)
    {
        thePath = path;
    }
    public bool Exists () { return System.IO.File.Exists (thePath); }  
}

class Sort 
{
    IFileWrapper filewrapper;

    Sort(IFileWrapper fw) {
        filewrapper = fw;
    }

    int Main()
    {
        if (!filewrapper.Exists()) {
            //print error
            return 2;
        }
        // read the file and sort impl here
        return 0;
    }

    static int Main (String[] args)     
    {
        if (args.Length  == 0 )  {
            // print message 
            return 1;
        }
        IFileWrapper fw = new FileWrapper(args[0]);
        Sort app = new Sort(fw);
        return app.Main();
    }
}

{% end %}
{% end %}
{% right %}
1. In main - Introduce an object so we can create and configure it externally.
1. Program entry point `static Main()`, is limited to doing basic argument validation and delegating to the object

{% end %}

!SLIDE 

### Now back to our test case:

1. Modify the test to 
    - create the `Sort` object, 
    - give it a fake `IFileWrapper` instance 
    - then call `main` on the object

{% code %}
// rolling out your own mock implementation
class FakeFileWrapper: IFileWrapper {
	string path;
	public MockFileWrapper(string path) { this.path = pth; }
    bool Exists () { return path.contains ("true")); }
}
class SortTest {
    // other tests

    public void FileNotExistsTest() {
    	// Arrange
        IFileWrapper mfw = new FakeFileWrapper("/some/test/path");	
        Sort app = new Sort(mfw);

        // Act
        int retval = app.Main();

        // Assert
        Assert.AreEqual (retval, 2);
    }

    // Also implement the check that if file exists, then we should get 0.
    public void FileExistsTest() {
    	// write another test case here..
    	Assert.AreNotEqual<int> (retval, 2);
    }
}
{% end %}
!SLIDE

Mocks help in writing robust, stable test cases
-------------------------------
*Pros*

* Using mocks lets you keep the scope to the class under test.
* So when test fails, you know its something in the class under test.
    - Rather than chasing down a rabbit's hole into what else could have gone wrong in its dependencies.
* Unit tests are fast - and this is super important since they will ideally run at each commit.
* Unit tests are robust - success/failure does depends solely on the class under test.

{% step %}

*Limitations of mocks*

* Typically mocks can be used for interfaces or virtual methods.
* Statics, non-virtual methods, sealed types are typical problem areas.
    - These force you to either find a class higher up in the hierarchy [GOOD]
    - Or you have to introduce an interface around it [GOOD - BUT NOT ALWAYS POSSIBLE]
* There are some frameworks that circumvent the above at an IL layer, however we're not going to cover them.
    * Moles - Microsoft Research.
    * Typemock Isolater.
{% end %}

{% step %}
Mock frameworks automate the process of creating mocks so we don't have to code them by hand as above.
They make it easy to set up expectations of what to do when a particular dependency is used.
{% end %}

Completing 'Sort'
===============================
Now we have the same issue with `File.ReadAllLines`,  `Array.Sort`  and the `Console.Writeline` calls. 

{% code %}
class Sort 
{
    IFileWrapper filewrapper;

    Sort(IFileWrapper fw) {
        filewrapper = fw;
    }

    int Main()
    {
        if (!filewrapper.Exists()) {
            Console.Writeline ("Input file does not exist");
            return 2;
        }
        // read the file contents
        // sort
        // print
        return 0;
    }

    static int Main (String[] args)     
    {
        if (args.Length  == 0 )  {
            Console.Writeline ("Please supply a file path to sort.")
            return 1;
        }
        IFileWrapper fw = new FileWrapper(args[0]);
        Sort app = new Sort(fw);
        return app.Main();
    }
}


{% end %}
!SLIDE 

- `File.ReadAllLines` - Add  `ReadAllLines` in the `IFileWrapper` interface.
- `Array.Sort` - introduce an `ISort` interface
- `Console.Writeline` - 'IS A' TextWriter - so this is just a case of refactoring our code to depend on a base type rather than a concrete implementation.

{% code lang=csharp %}
interface ISort {
	void sort(String[] theArray);
}
class SortImpl: ISort {
	void  sort (String[] theArray) { Array.Sort(theArray);}
}
{% end %}

{% code lang=csharp %}
class Sort {

	public static TextWriter outwriter = Console.Out;
    public static int Main(string[] args)
    {
        if (args.Length == 0)
        {
            outwriter.WriteLine(" Please provide filename to sort");
            return 1;
        }
        IFileWrapper input = new FileWrapper(args[0]);
        ISort sortImpl = new ArraySorter();
        TextWriter output = Console.Out;

        Program app = new Program(input, sortImpl, output);
        return app.Main();
    }

    IFileWrapper filewrapper;
    ISort sorter;
    Textwriter os;
    Sort(IFileWrapper filewrapper, ISort sorter, Textwriter os) {
        this.filewrapper = filewrapper;
        this.sorter = sorter;	
        this.os = os;
    }

    public int Main() {
        if (!filewrapper.Exists()) {
            //print error
            return 2;
        }
        String[] lines = filewrapper.ReadAllLines();
        sorter.Sort(lines)
        for (int i = 0; i < lines.Length; i++) {
            os.Writeline(lines[i]);
        }
        return 0;
    }
}
{% end %}

Taking stock
===============================
Single Responsibility Principle (SRP)

- Responsibilities of Reading/Sorting/Writing are split
- Each can be changed independently.

Open/Closed Principle (OCP)

- ISort, FileWrapper are Open for extension (subclass the type).

Liskov's Substitution Principle (LSP)

- Any place an interface is used, we can put any of the supported subclass implementations

Interface Segregation Principle (ISP)

- Earlier, the whole app comprised of a single type (Sort) and a single method (main)
- Each interface is thin and exposes a set of related apis.

Dependency Injection Principle (DIP)

- No references to concrete types directly (other than in Sort.main)
- Easy to introduce a factory to abstract that out


Food for thought
===============================

1. Support comment lines - (any number of lines beginning with #) - that don't get sorted and don't get printed out.
1. The file to sort can also be placed on a HTTP server. Change the program to support the case where the input is either a file path or a Url.
1. Default implementation of Array.Sort is Quicksort. For performance reasons, if the file is has less than 1000 records, use quicksort else use Merge sort.

{% step %}
Has `Sort` become:

- Extensible?
- More maintainable?
- Reusable?
{% end %}

Revisiting TDD
========================

{% left %}
{% step %}
- Drives minimal design with the right level of abstraction.
    - Helps prevent both under engineering/over engineering.
- Forces us to think about how the code will be used!
- Highlights problems early on 
    - If its hard to write unit test cases, then its probably hard for the class to be used as well
- Improves initial quality levels.
- Rigorous measure of quality of code that's repeatable.
- Almost always, results in increased velocity.
{% end %}
{% end %}

{% right %}
![Metric](images\good_code.JPG)
{% end %}
{% step %}
__Takeaway__ : TDD/Unit tests will not by itself make you design good software. However, it will immediately point out design pitfalls/shortcomings.
{% end %}

Other benefits
===============================

- Formal documentation of expectations from your code.
- System is easier to extend over time - a good regression suite.
- Easier to refactor and remove code smells
    - go ahead move things around, see tests failing
        and go fix them till they work.

Challenges?
================================================================================
1. Adoption - requires a mindset change.
    - After years of just writing code, requires some committment to go to a TDD approach.
1. Working with code and frameworks that themselves aren't written with testability in mind poses a challenge.
1. Requires an initial investment into learning to use unit test frameworks and tools.
    - Mock frameworks
    - Advanced features of your preferred unit test tool.


Summarizing
===============================
1. SOLID helps in arriving at a better system design
1. Added benefit comes when you couple it with TDD. 
1. Unit tests are best written _before_ the code.
    - so that they can drive your design.
1. Learning to use Mock frameworks takes the pain away from _"fake it till you make it"_ dictum.
1. Learn to use a DI framework/container.
    -  Ninject is very well regarded in the .NET world.
    -  For Java, Spring is has been around for a long time.

{% step %}
Caveats:

1. SOLID are principles - not rules. And it's not a silver bullet. It's _always a judgement call_.
1. Deciding when to apply them is something that comes with practice.
1. They're low level - so they won't help you review HLDs. Their use comes during LLD and development 
1. But TDD will help you gain the experience, perspective and insights required to reach there.
{% end %}

Actual Unit tests
===============================

{{ code 'code\Sort\SortTests\SortTest.cs' lang=csharp}}

Code
===============================

{{ code 'code\Sort\SortApp\Program.cs' lang=csharp }}
